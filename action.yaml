name: 'Prepare Kubernetes Namespace'
description: 'Many applications require others to exist within the same namespace. Instead of creating many branches on other repos, this action will simply deploy an ExternalName for other services.'

inputs:
  GCP_SA_KEY: 
    description: 'GCP Service Account Key (JSON)'
    required: true

  GKE_CLUSTER_NAME:
    description: 'Google Kubernetes Engine Cluster name'
    required: true

  GCP_ZONE: 
    description: 'GCP Zone'
    required: true

  GCP_PROJECT_ID:
    description: 'GCP Project ID'
    required: true

  TLD:
    description: 'Top Level Domain to create subdomain on.'
    required: true

  TO_NAMESPACE: 
    description: 'Allows to override the desired NAMESPACE variable'
    required: false
    default: ${{ github.ref_name }}

  FROM_NAMESPACE: 
    description: 'Allows to override the desired NAMESPACE variable'
    required: false
    default: ${{ github.event.repository.default_branch }}

  repos:
    description: 'Comma separated list of repositories to instead deploy a copy from the default namespace'
    required: false

runs:
  using: 'composite'
  steps:
    ###### Setup Environment Variables ######
    - name: Checkout
      uses: actions/checkout@v2
      with:
        repository: dmsi-io/gha-env-variables
        path: gha-env-variables

    - name: TO_NAMESPACE
      run: |
        TO_NAMESPACE=$(gha-env-variables/clean_variable.sh ${{ inputs.TO_NAMESPACE }})
        echo "TO_NAMESPACE=$TO_NAMESPACE"

        echo "TO_NAMESPACE=$TO_NAMESPACE" >> $GITHUB_ENV
      shell: bash

    - name: FROM_NAMESPACE
      run: |
        FROM_NAMESPACE=$(gha-env-variables/clean_variable.sh ${{ inputs.FROM_NAMESPACE }})
        echo "FROM_NAMESPACE=$FROM_NAMESPACE"

        echo "FROM_NAMESPACE=$FROM_NAMESPACE" >> $GITHUB_ENV
      shell: bash

    ###### GCloud Setup ######

    - name: Setup GCloud Auth
      id: auth
      uses: google-github-actions/auth@v0.4.0
      with:
        credentials_json: ${{ inputs.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v0.2.1

    - name: Authenticate GKE cluster
      run: gcloud container clusters get-credentials ${{ inputs.GKE_CLUSTER_NAME }} --zone ${{ inputs.GCP_ZONE }} --project ${{ inputs.GCP_PROJECT_ID }}
      shell: bash

    ###### Deploy Kubernetes Artifacts ######

    - name: Deploy Namespace
      run: |
        cat namespace.yaml | envsubst | kubectl apply -f - 
      shell: bash
      working-directory: ${{ github.action_path }}/k8s

    - name: Deploy Ingresses
      run: |
        for n in $(kubectl get -o=name ingress -n $FROM_NAMESPACE)
        do
            if [[ $(kubectl get $n -n $TO_NAMESPACE -o=name --ignore-not-found) ]]; then
                echo "$n already exists in $TO_NAMESPACE" 
            else 
                kubectl get $n -n $FROM_NAMESPACE -o json \
                    | jq 'del(.metadata["namespace","creationTimestamp","resourceVersion","selfLink","uid"])' \
                    | sed -e "s:$FROM_NAMESPACE:$TO_NAMESPACE:g" \
                    | kubectl apply -n $TO_NAMESPACE -f -
            fi
        done
      shell: bash

    - name: Copy Secrets,ConfigMaps
      run: |
        for n in $(kubectl get -o=name secret,configmap -n $FROM_NAMESPACE)
        do
            if [[ $(kubectl get $n -n $TO_NAMESPACE -o=name --ignore-not-found) ]]; then
                echo "$n already exists in $TO_NAMESPACE" 
            else 
                kubectl get $n -n $FROM_NAMESPACE -o json \
                    | jq 'del(.metadata["namespace","creationTimestamp","resourceVersion","selfLink","uid"])' \
                    | kubectl apply -n $TO_NAMESPACE -f -
            fi
        done
      shell: bash

    - name: Deploy Default Deployments
      run: |
        REPOS="${{ inputs.repos }}"
        for repo in ${REPOS//,/ }
        do
          REPO_SERVICE=$(gha-env-variables/clean_variable.sh $repo)
          if [[ $(kubectl get deployment $REPO_SERVICE -n $TO_NAMESPACE -o=name --ignore-not-found) ]]; then
              echo "$REPO_SERVICE deployment already exists in $TO_NAMESPACE" 
          elif [[ $(kubectl get deployment $REPO_SERVICE -n $FROM_NAMESPACE -o=name --ignore-not-found) ]]; then
              kubectl get deployment $REPO_SERVICE -n $FROM_NAMESPACE -o json \
              | jq 'del(.metadata["namespace","creationTimestamp","resourceVersion","selfLink","uid"],.status)' \
              | kubectl apply -n $TO_NAMESPACE -f -
          else
              echo "$REPO_SERVICE deployment not found in $FROM_NAMESPACE"
          fi
        done
      shell: bash

    - name: Deploy Default Services
      run: |
        REPOS="${{ inputs.repos }}"
        for repo in ${REPOS//,/ }
        do
          REPO_SERVICE=$(gha-env-variables/clean_variable.sh $repo)
          if [[ $(kubectl get service $REPO_SERVICE -n $TO_NAMESPACE -o=name --ignore-not-found) ]]; then
              echo "$REPO_SERVICE service already exists in $TO_NAMESPACE" 
          elif [[ $(kubectl get service $REPO_SERVICE -n $FROM_NAMESPACE -o=name --ignore-not-found) ]]; then 
              kubectl get service $REPO_SERVICE -n $FROM_NAMESPACE -o json \
              | jq 'del(.metadata["namespace","creationTimestamp","resourceVersion","selfLink","uid"],.spec["clusterIP","clusterIPs"],.spec.ports[].nodePort)' \
              | kubectl apply -n $TO_NAMESPACE -f -
          else
              echo "$REPO_SERVICE service not found in $FROM_NAMESPACE"
          fi
        done
      shell: bash

    - name: Deploy ExternalName Services
      run: |
        for n in $(kubectl get -o=name service -n $FROM_NAMESPACE)
        do
            if [[ $(kubectl get $n -n $TO_NAMESPACE -o=name --ignore-not-found) ]]; then
                echo "$n already exists in $TO_NAMESPACE" 
            else 
                export EXTERNAL_SERVICE=${n##*/}
                export PORT=$(kubectl get $n -n $FROM_NAMESPACE -o json \
                        | jq -r '.spec.ports[].port')

                cat external-service-template.yaml | envsubst | kubectl apply -f - 
            fi
        done
      shell: bash
      working-directory: ${{ github.action_path }}/k8s